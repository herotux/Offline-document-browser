name: Build Windows App and MSI Installer

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  workflow_dispatch: {}

jobs:
  build-and-publish:
    runs-on: windows-latest
    defaults:
      run:
        shell: pwsh

    steps:
      # 1. Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Setup .NET SDK
      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      # 3. Restore dependencies
      - name: Restore dependencies
        run: dotnet restore UtilityDocuments.csproj

      # 4. Build the WPF application
      - name: Build the application
        run: dotnet build UtilityDocuments.csproj --configuration Release --no-restore

      # 5. Install WiX Toolset via MSI
      - name: Install WiX Toolset
        run: |
          $msi = "$env:USERPROFILE\wix-cli-x64.msi"
          Invoke-WebRequest -Uri "https://github.com/wixtoolset/wix/releases/download/v6.0.2/wix-cli-x64.msi" -OutFile $msi
          Start-Process msiexec.exe -ArgumentList "/i `"$msi`" /quiet /norestart" -Wait
          $env:PATH += ";C:\Program Files (x86)\WiX Toolset v6\bin"

      # 6. Build the MSI installer
      - name: Build MSI installer
        run: |
          $sourceDir = "$(pwd)\bin\Release\net8.0-windows"
          $wixObj = "Setup\setup.wixobj"
          $msiOut = "Setup\bin\Release\UtilityDocuments.msi"

          # Compile .wxs to .wixobj
          candle.exe -dSourceDir=$sourceDir Setup\setup.wxs -out $wixObj

          # Link .wixobj to .msi
          light.exe $wixObj -out $msiOut

      # 7. List build artifacts
      - name: List build artifacts
        run: Get-ChildItem -Recurse .\bin, .\Setup\bin | Select-Object FullName, Length

      # 8. Upload MSI artifact
      - name: Upload Artifacts (MSI)
        uses: actions/upload-artifact@v4
        with:
          name: windows-installer
          path: Setup/bin/Release/**/*.msi

  create-release-on-tag:
    runs-on: ubuntu-latest
    needs: build-and-publish
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: windows-installer
          path: artifacts

      - name: Create GitHub release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          body: Release generated by CI
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload MSI to release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          files: artifacts/*.msi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
